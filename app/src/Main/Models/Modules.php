<?php

namespace {

    use SilverStripe\CMS\Model\SiteTree;
    use SilverStripe\Forms\CheckboxField;
    use SilverStripe\Forms\DropdownField;
    use SilverStripe\Forms\GridField\GridField;
    use SilverStripe\Forms\GridField\GridFieldConfig_RecordEditor;
    use SilverStripe\Forms\HiddenField;
    use SilverStripe\Forms\ReadonlyField;
    use SilverStripe\Forms\TextField;
    use SilverStripe\ORM\DataObject;
    use UndefinedOffset\SortableGridField\Forms\GridFieldSortableRows;

    class Modules extends DataObject
    {
        private static $default_sort = 'Sort';
        private static $table_name = 'Module';

        private static $singular_name = "Module";
        private static $plural_name = "Modules";

        private static $db = [
            'Name'     => 'Text',
            'Icon'     => 'Varchar',
            'CodeName' => 'Varchar',
            'Archived' => 'Boolean',
            'Sort'     => 'Int'
        ];

        private static $has_one = [
            'Page'   => SiteTree::class,
            'Period' => ModulePeriod::class,
            'Type'   => ModuleType::class,
        ];

        private static $has_many = [
            'Forms'       => FieldTypeHolder::class,
            'Submissions' => Submissions::class
        ];

        private static $summary_fields = [
            'ID',
            'Name',
            'CodeName',
            'ModuleType',
            'Icon',
            'Status'
        ];

        public function getCMSFields()
        {
            $fields = parent::getCMSFields(); // TODO: Change the autogenerated stub
            $fields->removeByName('PeriodID');
            $fields->addFieldToTab('Root.Main', ReadonlyField::create('PeriodRO', 'Period', $this->Period()->Name));

            $fields->addFieldToTab('Root.Main', TextField::create('Name'));
            $fields->addFieldToTab('Root.Main', TextField::create('CodeName')
                ->setDescription('E.g. PK for Prescribing Indicator'));

            $fields->addFieldToTab('Root.Main', DropdownField::create('PageID', 'Select page to link',
                SiteTree::get()->filter('ClassName', 'ModulePage')->map('ID', 'Title'))->setEmptyString('(Select one)'));

            $fields->addFieldToTab('Root.Main', DropdownField::create('TypeID', 'Module type',
                ModuleType::get()->filter('Archived', false)->map('ID', 'Title'))->setEmptyString('(Select one)'));

            $fields->addFieldToTab('Root.Main', $icon = TextField::create('Icon', 'Fa icon'));
            $icon->setDescription('e.g. far fa-capsules (<a href="https://fontawesome.com/icons?d=gallery" target="_blank">click here for more icons</a>)');

            $config = GridFieldConfig_RecordEditor::create('999');
            if ($this->Forms()->Count()) {
                $config->addComponent(new GridFieldSortableRows('Sort'));
            }
            $editor = GridField::create('Forms', 'Forms', $this->Forms(), $config);
            $fields->addFieldToTab('Root.Forms', $editor);

            $configSubmissions = GridFieldConfig_RecordEditor::create('999');
            $editorSubmissions = GridField::create('Submissions', 'Submissions', $this->Submissions(), $configSubmissions);
            $fields->addFieldToTab('Root.Submissions', $editorSubmissions);

            $fields->addFieldToTab('Root.Main', CheckboxField::create('Archived'));
            $fields->addFieldToTab('Root.Main', HiddenField::create('Sort'));

            return $fields;
        }

        public function getStatus()
        {
            if($this->Archived == 1) return _t('GridField.Archived', 'Archived');
            return _t('GridField.Live', 'Live');
        }

        public function getVisibleForms()
        {
            return $this->Forms()->filter('Archived', false)->sort('Sort');
        }

        public function getVisibleSubmissions()
        {
            return $this->Submissions()->filter('Archived', false)->sort('Sort');
        }

        public function getModuleType()
        {
            $moduleType = ModuleType::get()->filter('Archived', false)->byID($this->TypeID);
            if ($moduleType) return $moduleType->Name;
            return 'Not Set';
        }
    }
}
