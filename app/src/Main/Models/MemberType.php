<?php

namespace {

    use SilverStripe\Forms\CheckboxField;
    use SilverStripe\Forms\GridField\GridField;
    use SilverStripe\Forms\GridField\GridFieldConfig_RecordEditor;
    use SilverStripe\Forms\ReadonlyField;
    use SilverStripe\Forms\TextField;
    use SilverStripe\ORM\DataObject;
    use UndefinedOffset\SortableGridField\Forms\GridFieldSortableRows;

    class MemberType extends DataObject
    {
        private static $table_name = 'MemberType';

        private static $db = [
            'Name'     => 'Varchar',
            'Archived' => 'Boolean',
        ];

        private static $has_many = [
            'ModulePeriods' => ModulePeriod::class
        ];

        private static $summary_fields = [
            'Name'   => 'Member type',
            'Status'
        ];

        public function getCMSFields()
        {
            $fields = parent::getCMSFields(); // TODO: Change the autogenerated stub
            if ($this->Name) {
                $fields->addFieldToTab('Root.Main', ReadonlyField::create('Name'));
            } else {
                $fields->addFieldToTab('Root.Main', TextField::create('Name'));
            }

            $config = GridFieldConfig_RecordEditor::create('999');
            if ($this->owner->ModulePeriods()->Count()) {
                $config->addComponent(new GridFieldSortableRows('Sort'));
            }
            $editor = GridField::create('ModulePeriods', 'Module Period', $this->ModulePeriods(), $config);
            $fields->removeByName("ModulePeriods");
            $fields->addFieldToTab('Root.Main', $editor);

            $fields->addFieldToTab('Root.Main', CheckboxField::create('Archived'));

            return $fields;
        }

        public function getStatus()
        {
            if($this->Archived == 1) return _t('GridField.Archived', 'Archived');
            return _t('GridField.Live', 'Live');
        }
    }
}
