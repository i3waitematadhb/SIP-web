<?php

namespace {

    use SilverStripe\Forms\CheckboxField;
    use SilverStripe\Forms\DateField;
    use SilverStripe\Forms\GridField\GridField;
    use SilverStripe\Forms\GridField\GridFieldConfig_RecordEditor;
    use SilverStripe\Forms\HiddenField;
    use SilverStripe\Forms\ReadonlyField;
    use SilverStripe\Forms\TextField;
    use SilverStripe\ORM\DataObject;
    use UndefinedOffset\SortableGridField\Forms\GridFieldSortableRows;

    class ModulePeriod extends DataObject
    {
        private static $default_sort = 'Sort';
        private static $table_name = 'ModulePeriod';

        private static $singular_name = "Module Period";
        private static $plural_name = "Module Periods";

        private static $db = [
            'Name'      => 'Varchar',
            'StartDate' => 'Date',
            'EndDate'   => 'Date',
            'Archived'  => 'Boolean',
            'Sort'      => 'Int'
        ];

        private static $has_one = [
            'MemberType' => MemberType::class,
        ];

        private static $has_many = [
            'Modules' => Modules::class,
        ];

        private static $summary_fields = [
            'Name',
            'StartDate.Nice' => 'StartDate',
            'EndDate.Nice'   => 'EndDate',
            'Status'
        ];

        public function getCMSFields()
        {
            $fields = parent::getCMSFields(); // TODO: Change the autogenerated stub
            $fields->removeByName('MemberTypeID');
            $fields->addFieldToTab('Root.Main', ReadonlyField::create('MemberTypeRO', 'Member type', $this->MemberType()->Name));

            if ($this->Name) {
                $fields->addFieldToTab('Root.Main', ReadonlyField::create('Name'));
            } else {
                $fields->addFieldToTab('Root.Main', TextField::create('Name'));
            }

            $fields->addFieldToTab('Root.Main', DateField::create('StartDate'));
            $fields->addFieldToTab('Root.Main', DateField::create('EndDate'));
            $fields->addFieldToTab('Root.Main', CheckboxField::create('Archived'));
            $fields->addFieldToTab('Root.Main', HiddenField::create('Sort'));

            $config = GridFieldConfig_RecordEditor::create('999');
            if ($this->owner->Modules()->Count()) {
                $config->addComponent(new GridFieldSortableRows('Sort'));
            }
            $editor = GridField::create('Modules', 'Modules', $this->Modules(), $config);
            $fields->removeByName("Modules");
            $fields->addFieldToTab('Root.Main', $editor);

            return $fields;
        }

        protected function onBeforeWrite()
        {
            parent::onBeforeWrite(); // TODO: Change the autogenerated stub
            $startDate  = date("M Y",  strtotime($this->StartDate));
            $endDate    = date("M Y",  strtotime($this->EndDate));
            $this->Name = $startDate . ' - ' . $endDate;
        }

        public function getStatus()
        {
            if($this->Archived == 1) return _t('GridField.Archived', 'Archived');
            return _t('GridField.Live', 'Live');
        }
    }
}
