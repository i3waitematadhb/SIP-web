<?php

namespace {

    use SilverStripe\Forms\CheckboxField;
    use SilverStripe\Forms\DropdownField;
    use SilverStripe\Forms\GridField\GridField;
    use SilverStripe\Forms\GridField\GridFieldConfig_RecordEditor;
    use SilverStripe\Forms\HiddenField;
    use SilverStripe\Forms\HTMLEditor\HTMLEditorField;
    use SilverStripe\Forms\ReadonlyField;
    use SilverStripe\Forms\TextareaField;
    use SilverStripe\Forms\TextField;
    use SilverStripe\ORM\DataObject;
    use UncleCheese\DisplayLogic\Forms\Wrapper;
    use UndefinedOffset\SortableGridField\Forms\GridFieldSortableRows;

    class FieldType extends DataObject
    {
        private static $default_sort = 'Sort';
        private static $table_name = 'FieldType';

        private static $singular_name = "Field type";
        private static $plural_name = "Field types";

        private static $db = [
            'Name'            => 'Text',
            'Content'         => 'HTMLText',
            'Type'            => 'Varchar',
            'Label'           => 'Text',
            'ShowInDashboard' => 'Boolean',
            'Archived'        => 'Boolean',
            'Sort'            => 'Int'
        ];

        private static $has_one = [
            'FieldTypeHolder'   => FieldTypeHolder::class,
        ];

        private static $has_many = [
            'DropdownFieldItems' => DropdownFieldItem::class,
            'CheckboxFieldItems' => CheckboxFieldItem::class,
            'RadioFieldItems'    => RadioFieldItem::class,
            'MultiTextboxItems'  => MultiTextboxItem::class
        ];

        private static $summary_fields = [
            'Name',
            'Type',
            'Label',
            'IsShownInDashboard' => 'Show in dashboard',
            'Status',
        ];

        public function getCMSFields()
        {
            $fields = parent::getCMSFields(); // TODO: Change the autogenerated stub
            $fields->removeByName('FieldTypeHolderID');
            $fields->addFieldToTab('Root.Main', ReadonlyField::create('FieldTypeHolderRO', 'Field type holder', $this->FieldTypeHolder()->Name));

            $fields->addFieldToTab('Root.Main', TextField::create('Name'));
            $fields->addFieldToTab('Root.Main', DropdownField::create('Type', 'Field type',
            array(
                'Title' => 'Title',
                'Text'  => 'Text' ,
                'Image' => 'Image',
                'Separator' => 'Separator',
                'Ethnicity' => 'Ethnicity Lists',
                'Checkbox'  => 'Checkbox',
                'RadioButton' => 'Radio Button',
                'Dropdown'    => 'Dropdown',
                'Textbox'     => 'Textbox',
                'MultipleTextbox' => 'Multiple Textbox',
                'Textarea'        => 'Textarea',
                'Date'            => 'Date',
                'UserAccount'     => 'User Account'
            )));
            $fields->addFieldToTab('Root.Main', TextareaField::create('Label', 'Field label'));

            $configDropdown = GridFieldConfig_RecordEditor::create('999');
            if ($this->DropdownFieldItems()->Count()) {
                $configDropdown->addComponent(new GridFieldSortableRows('Sort'));
            }
            $fields->removeByName("DropdownFieldItems");
            $fields->addFieldToTab('Root.Main', Wrapper::create(
                GridField::create('DropdownFieldItems', 'Dropdown items', $this->DropdownFieldItems(), $configDropdown
                ))->displayIf("Type")->isEqualTo("Dropdown")->end());

            $configEthnicity = GridFieldConfig_RecordEditor::create('999');
            $ethnicity = Ethnicity::get();
            if (count($ethnicity)) {
                $configEthnicity->addComponent(new GridFieldSortableRows('Sort'));
            }
            $fields->addFieldToTab('Root.Main', Wrapper::create(
                GridField::create('Ethnicity', 'Ethnicity lists', Ethnicity::get(), $configEthnicity
                ))->displayIf("Type")->isEqualTo('Ethnicity')->end());

            $configCheckbox = GridFieldConfig_RecordEditor::create('999');
            if ($this->CheckboxFieldItems()->Count()) {
                $configCheckbox->addComponent(new GridFieldSortableRows('Sort'));
            }
            $fields->removeByName('CheckboxFieldItems');
            $fields->addFieldToTab('Root.Main', Wrapper::create(
                GridField::create('CheckboxFieldItems', 'Checkbox items', $this->CheckboxFieldItems(), $configCheckbox
                ))->displayIf("Type")->isEqualTo("Checkbox")->end());

            $configRadio = GridFieldConfig_RecordEditor::create('999');
            if ($this->RadioFieldItems()->Count()) {
                $configRadio->addComponent(new GridFieldSortableRows('Sort'));
            }
            $fields->removeByName('RadioFieldItems');
            $fields->addFieldToTab('Root.Main', Wrapper::create(
                GridField::create('RadioFieldItems', 'Radio items', $this->RadioFieldItems(), $configRadio
                ))->displayIf("Type")->isEqualTo("RadioButton")->end());

            $configTextbox = GridFieldConfig_RecordEditor::create('999');
            if ($this->MultiTextboxItems()->Count()) {
                $configTextbox->addComponent(new GridFieldSortableRows('Sort'));
            }
            $fields->removeByName('MultiTextboxItems');
            $fields->addFieldToTab('Root.Main', Wrapper::create(
                GridField::create('MultiTextboxItems', 'Multiple textbox items', $this->MultiTextboxItems(), $configTextbox
                ))->displayIf("Type")->isEqualTo("MultipleTextbox")->end());

            $fields->addFieldToTab('Root.Main', HTMLEditorField::create('Content')
                ->displayIf("Type")->isEqualTo()->end('Text'));

            $fields->addFieldToTab('Root.Main', CheckboxField::create('ShowInDashboard'));
            $fields->addFieldToTab('Root.Main', CheckboxField::create('Archived'));
            $fields->addFieldToTab('Root.Main', HiddenField::create('Sort'));

            return $fields;
        }

        public function getStatus()
        {
            if($this->Archived == 1) return _t('GridField.Archived', 'Archived');
            return _t('GridField.Live', 'Live');
        }

        public function getVisibleDropdownFieldItems()
        {
            return $this->DropdownFieldItems()->filter('Archived', false)->sort('Sort');
        }

        public function getVisibleCheckboxFieldItems()
        {
            return $this->CheckboxFieldItems()->filter('Archived', false)->sort('Sort');
        }

        public function getVisibleRadioFieldItems()
        {
            return $this->RadioFieldItems()->filter('Archived', false)->sort('Sort');
        }

        public function getVisibleMultiTextboxItems()
        {
            return $this->MultiTextboxItems()->filter('Archived', false)->sort('Sort');
        }

        public function getVisibleEthnicityItems()
        {
            return Ethnicity::get()->filter('Archived', false)->sort('Sort');
        }

        public function getIsShownInDashboard()
        {
            if($this->ShowInDashboard == 1) return _t('GridField.Yes', 'Yes');
            return _t('GridField.No', 'No');
        }
    }
}
