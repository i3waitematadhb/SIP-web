<?php

namespace {

    use SilverStripe\Forms\CheckboxField;
    use SilverStripe\Forms\GridField\GridField;
    use SilverStripe\Forms\GridField\GridFieldConfig_RecordEditor;
    use SilverStripe\Forms\HiddenField;
    use SilverStripe\Forms\ReadonlyField;
    use SilverStripe\Forms\TextField;
    use SilverStripe\ORM\DataObject;
    use Symbiote\GridFieldExtensions\GridFieldEditableColumns;
    use Symbiote\GridFieldExtensions\GridFieldOrderableRows;

    class Submissions extends DataObject
    {
        private static $singular_name = 'Submission';

        private static $plural_name = 'Submissions';

        private static $default_sort = 'Sort';

        private static $table_name = 'Submissions';

        private static $db = [
            'Name'    => 'Text',
            'PracticeID' => 'Int',
            'Pho'     => 'Varchar',
            'Date'    => 'Varchar',
            'Contact' => 'Varchar',
            'Archived'=> 'Boolean',
            'Sort'    => 'Int'
        ];

        private static $has_one = [
            'Module' => Modules::class,
        ];

        private static $has_many = [
            'Records' =>  Records::class
        ];

        private static $summary_fields = [
            'ID',
            'CurrentModule' => 'Module',
            'PracticeID',
            'Pho' => 'PHO',
            'Name',
            'Date' => 'Review_Date',
            'Contact',
            'Status'
        ];

       public function getCMSFields()
       {
           $fields = parent::getCMSFields(); // TODO: Change the autogenerated stub
           $fields->removeByName('ModuleID');
           $fields->addFieldToTab('Root.Main', ReadonlyField::create('ModuleRO', 'Module', $this->Module()->Title));

           $fields->addFieldToTab('Root.Main', new TextField('Name'));
           $fields->addFieldToTab('Root.Main', new TextField('PracticeID'));
           $fields->addFieldToTab('Root.Main', new TextField('Pho'));
           $fields->addFieldToTab('Root.Main', new TextField('Date'));
           $fields->addFieldToTab('Root.Main', new TextField('Contact'));

           $gridConfig = GridFieldConfig_RecordEditor::create(999);
           if($this->Records()->Count())
           {
               $gridConfig->addComponent(new GridFieldOrderableRows());
           }
           $gridConfig->addComponent(new GridFieldEditableColumns());
           $gridColumns = $gridConfig->getComponentByType(GridFieldEditableColumns::class);
           $gridColumns->setDisplayFields([
               'Archived' => [
                   'title' => 'Archive',
                   'callback' => function($record, $column, $grid) {
                       return CheckboxField::create($column);
                   }]
           ]);

           $gridField = GridField::create(
               'Records',
               'Records',
               $this->Records(),
               $gridConfig
           );

           $fields->removeByName('Records');
           $fields->addFieldToTab('Root.Main', $gridField);

           $fields->addFieldToTab('Root.Main', new CheckboxField('Archived'));
           $fields->addFieldToTab('Root.Main', new HiddenField('Sort'));

           return $fields;
       }

        public function getStatus()
        {
            if($this->Archived == 1) return _t('GridField.Archived', 'Archived');
            return _t('GridField.Live', 'Live');
        }

        public function getCurrentModule()
        {
            return $this->Module()->Name;
        }

        public function getExtraSummaries()
        {
            $records = Records::get()->filter('SubmissionID', $this->ID);
            $output = [];
            foreach ($records as $record) {
                $output[] = [
                    'RecordID' => $record->ID
                ];
            }
            return $output;
        }
    }
}
