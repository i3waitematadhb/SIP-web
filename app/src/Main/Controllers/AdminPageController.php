<?php

namespace {

    use SilverStripe\Security\Group;
    use SilverStripe\Security\Security;
    use SilverStripe\View\Requirements;

    class AdminPageController extends PageController {

        protected function init()
        {
            parent::init(); // TODO: Change the autogenerated stub

            Requirements::javascript('https://cdn.datatables.net/buttons/1.6.5/js/dataTables.buttons.min.js');
            Requirements::javascript('https://cdn.datatables.net/buttons/1.6.5/js/buttons.flash.min.js');
            Requirements::javascript('https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js');
            Requirements::javascript('https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js');
            Requirements::javascript('https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js');
            Requirements::javascript('https://cdn.datatables.net/buttons/1.6.5/js/buttons.html5.min.js');
            Requirements::javascript('https://cdn.datatables.net/buttons/1.6.5/js/buttons.print.min.js');

            $member = $this->getCurrentUser();
            $controller = new PageController();

            if ($member) {
                $adminGroup = Group::get()->filter('Code', 'administrators');
                if($adminGroup->Count() > 0){
                    $adminGroup = $adminGroup->first();
                }

                if (!$member->inGroup($adminGroup)) {
                    return $this->redirect('dashboard');
                }
            } else {
                return $this->redirect('login');
            }
        }

        public function getAllVisibleModules()
        {
            return Modules::get()->filter('Archived', false);
        }

        public function getAllVisibleMemberType()
        {
            return MemberType::get()->filter('Archived', false);
        }

        public function getAllVisibleSubmissions()
        {
            return Submissions::get()->filter('Archived', false);
        }

        public function getCurrentUser()
        {
            return Security::getCurrentUser();
        }
    }
}
