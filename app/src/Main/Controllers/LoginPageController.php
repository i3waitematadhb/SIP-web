<?php

namespace {

    use SilverStripe\Core\Injector\Injector;
    use SilverStripe\Forms\Form;
    use SilverStripe\Security\Group;
    use SilverStripe\Security\IdentityStore;
    use SilverStripe\Security\MemberAuthenticator\MemberAuthenticator;
    use SilverStripe\Security\Security;
    use SilverStripe\View\Requirements;

    class LoginPageController extends PageController
    {
        private static $allowed_actions = [
            'LoginForm',
        ];

        protected function init()
        {
            parent::init(); // TODO: Change the autogenerated stub
//            Requirements::javascript(
//                "https://apis.google.com/js/platform.js",
//                [
//                    "async" => true,
//                    "defer" => true,
//                ]
//            );

            $member = $this->getCurrentUser();
            if ($member) {
                $controller = new PageController();

                $userGroup = Group::get()->filter('Code', 'user');
                if($userGroup->Count() > 0){
                    $userGroup = $userGroup->first();
                }

                $adminGroup = Group::get()->filter('Code', 'administrators');
                if($adminGroup->Count() > 0){
                    $adminGroup = $adminGroup->first();
                }

                if ($member->inGroup($userGroup)) {
                    if ($link = $controller->getPageFromClass('DashboardPage')) {
                        return $this->redirect($link);
                    }
                } else {
                    if ($member->inGroup($adminGroup)) {
                        //code here
                    }
                }
            }

            // Redirect back
            //return $this->redirect('login');
        }

        public function LoginForm()
        {
            return LoginForm::create($this, __FUNCTION__);
        }

        public function doLogin($data, Form $form)
        {
            $controller = new PageController();
            $authenticator = new MemberAuthenticator();
            $backURL = $this->getBackURL();

            $request = $this->getRequest();
            $result = $form->getValidator()->getResult();

            $userGroup = Group::get()->filter('Code', 'user');
            if($userGroup->Count() > 0){
                $userGroup = $userGroup->first();
            }

            $adminGroup = Group::get()->filter('Code', 'administrators');
            if ($adminGroup->Count() > 0) {
                $adminGroup = $adminGroup->first();
            }

            $member = $authenticator->authenticate($data, $request, $result);

            if (!$member) {
                $form->sessionError('That username or password was incorrect');
                return $this->redirectBack();
            }

            $identityStore = Injector::inst()->get(IdentityStore::class);
            $identityStore->logIn($member, true, $request);

            if ($member->inGroup($userGroup)) {
                if ($link = $controller->getPageFromClass('DashboardPage')) {
                    return $this->redirect($link);
                }
            } else {
                if ($member->inGroup($adminGroup)) {
                    if ($link = $controller->getPageFromClass('AdminPage')) {
                        return $this->redirect($link);
                    }
                }
            }

            if ($backURL) {
                return $this->redirect($backURL);
            }

            // Redirect back
            return $this->redirectBack();
        }

        public function getCurrentUser()
        {
            return Security::getCurrentUser();
        }
    }
}
