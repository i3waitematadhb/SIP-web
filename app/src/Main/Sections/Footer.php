<?php

namespace {

    use SilverStripe\Forms\CheckboxField;
    use SilverStripe\Forms\DropdownField;
    use SilverStripe\Forms\GridField\GridField;
    use SilverStripe\Forms\GridField\GridFieldConfig_RecordEditor;
    use SilverStripe\Forms\HiddenField;
    use SilverStripe\Forms\TextareaField;
    use SilverStripe\Forms\TextField;
    use SilverStripe\ORM\DataObject;
    use UncleCheese\DisplayLogic\Forms\Wrapper;
    use UndefinedOffset\SortableGridField\Forms\GridFieldSortableRows;

    class Footer extends DataObject
    {
        private static $default_sort = 'Sort ASC';

        private static $db = [
            'Name'     => 'Text',
            'ItemType' => 'Varchar',//'Enum(array("Navigation", "Logos", "EmbeddedCode"))',
            'EmbeddedCode' => 'Text',
            'ShowTitle'=> 'Boolean',
            'Archived' => 'Boolean',
            'Sort'     => 'Int',
        ];

        private static $has_many = [
            'LinkItems' => LinkItem::class,
            'LogoItems' => LogoItem::class
        ];

        private static $summary_fields = [
            'Name',
            'IsShowTitle' => "Show title",
            'Status'
        ];

        public function getCMSFields()
        {
            $fields = parent::getCMSFields(); // TODO: Change the autogenerated stub
            $fields->addFieldToTab('Root.Main', TextField::create('Name'));
            $fields->addFieldToTab('Root.Main', CheckboxField::create('ShowTitle'));
            $fields->addFieldToTab('Root.Main', DropdownField::create('ItemType', 'Footer item type', array(
                'navigation' => 'Navigation',
                'logos'      => 'Logos',
                'code'       => 'EmbeddedCode'
            )));
            $fields->addFieldToTab('Root.Main', TextareaField::create('EmbeddedCode', 'Embedded code')->displayIf("ItemType")->isEqualTo("code")->end());

            /**
             *  Link Items Grid
             */
            $configLinkItems = GridFieldConfig_RecordEditor::create('999');
            if ($this->LinkItems()->Count()) {
                $configLinkItems->addComponent(new GridFieldSortableRows('Sort'));
            }
            $fields->removeByName("LinkItems");
            $fields->addFieldToTab('Root.Main', Wrapper::create(
                GridField::create('LinkItems', 'Link items', $this->LinkItems(), $configLinkItems))->displayIf("ItemType")->isEqualTo("navigation")->end());

            /**
             * Logo Items Grid
             */
            $configLogos = GridFieldConfig_RecordEditor::create('999');
            if ($this->LogoItems()->Count()) {
                $configLogos->addComponent(new GridFieldSortableRows('Sort'));
            }
            $fields->removeByName("LogoItems");
            $fields->addFieldToTab('Root.Main', Wrapper::create(
                GridField::create('LogoItems', 'Logo items', $this->LogoItems(), $configLogos))->displayIf("ItemType")->isEqualTo("logos")->end());

            $fields->addFieldToTab('Root.Main', new CheckboxField('Archived'));
            $fields->addFieldToTab('Root.Main', new HiddenField('Sort'));

            return $fields;
        }

        public function getVisibleLinkItems()
        {
            return $this->LinkItems()->filter('Archived', false)->sort('Sort');
        }

        public function getVisibleLogoItems()
        {
            return $this->LogoItems()->filter('Archived', false)->sort('Sort');
        }

        public function getStatus()
        {
            if($this->Archived == 1) return _t('GridField.Archived', 'Archived');
            return _t('GridField.Live', 'Live');
        }

        public function getIsShowTitle()
        {
            if($this->ShowTitle == 1) return _t('GridField.ShowTitle', 'Yes');
            return _t('GridField.No', 'No');
        }
    }
}
