<?php

namespace {

    use Sheadawson\DependentDropdown\Forms\DependentDropdownField;
    use SilverStripe\AssetAdmin\Forms\UploadField;
    use SilverStripe\Assets\Image;
    use SilverStripe\Forms\DropdownField;
    use SilverStripe\Forms\FieldList;
    use SilverStripe\Forms\HiddenField;
    use SilverStripe\Forms\TextField;
    use SilverStripe\ORM\DataExtension;
    use SilverStripe\Security\Group;

    class MemberExtension extends DataExtension
    {
        private static $db = [
            'PracticeID'             => 'Int',
            'PeriodID'               => 'Int',
            'PHOID'                  => 'Int',
            'MemberTypeID'           => 'Int',
            'ClinicalModuleID'       => 'Int',
            'PrescribingIndicatorID' => 'Int',
        ];

        private static $has_one = [
            'ProfileImage' => Image::class,
        ];

        private static $has_many = [
            'History' => History::class,
        ];

        private static $many_many = [
            'Submissions' => Submissions::class
        ];

        private static $owns = [
            'ProfileImage'
        ];

        public function updateCMSFields(FieldList $fields)
        {
            $fields->addFieldToTab('Root.Main', UploadField::create('ProfileImage')
                ->setFolderName('ProfileImages'),'Locale');

            $userGroup = Group::get()->filter('Code', 'user');
            if($userGroup->Count() > 0){
                $userGroup = $userGroup->first();
            }
            if ($this->owner->inGroup($userGroup)){
            $fields->addFieldToTab('Root.Main', $memberType = DropdownField::create('MemberTypeID', 'Select member type',
                MemberType::get()->filter('Archived', false)->map('ID', 'Name'))
                ->setEmptyString('(Select one)'),'Locale');

            $periodDataSource = function ($val)
            {
                return ModulePeriod::get()->filter(['Archived' => false, 'MemberTypeID' => $val])->map('ID', 'Name');
            };

            $fields->addFieldToTab('Root.Main', TextField::create('PracticeID'), 'Locale');

            $fields->addFieldToTab('Root.Main', DropdownField::create('PHOID', 'Select a PHO',
                PhoList::get()->filter('Archived', false)->map('ID', 'Name'))->displayIf('MemberTypeID')->isEqualTo(1)->end()
                ->setEmptyString('(Select one)'), 'Locale');

            $fields->addFieldToTab('Root.Main', $modulePeriod = DependentDropdownField::create('PeriodID', 'Select module period',
                $periodDataSource)->setDepends($memberType),'Locale');
                $modulePeriod->setEmptyString('(Select one)');

            $clinicalModuleDataSource = function ($val)
            {
                return Modules::get()->filter(['Archived' => false, 'PeriodID' => $val, 'TypeID' => 1])->map('ID', 'Name');
            };

            $fields->addFieldToTab('Root.Main', $clinicalModule = DependentDropdownField::create('ClinicalModuleID', 'Select clinical module',
                $clinicalModuleDataSource)->setDepends($modulePeriod),'Locale');
                $clinicalModule->setEmptyString('(Select one)');

            $prescribingIndicatorDataSource = function($val)
            {
                return Modules::get()->filter(['Archived' => false, 'PeriodID' => $val, 'TypeID' => 2])->map('ID', 'Name');
            };

            $fields->addFieldToTab('Root.Main', $prescribingIndicator = DependentDropdownField::create('PrescribingIndicatorID', 'Select prescribing indicator',
                $prescribingIndicatorDataSource)->setDepends($modulePeriod),'Locale');
                $prescribingIndicator->setEmptyString('(Select one)');
            } else {
                $fields->addFieldToTab('Root.Main', HiddenField::create('MemberTypeID'));
                $fields->addFieldToTab('Root.Main', HiddenField::create('PracticeID'));
                $fields->addFieldToTab('Root.Main', HiddenField::create('PHOID'));
                $fields->addFieldToTab('Root.Main', HiddenField::create('PeriodID'));
                $fields->addFieldToTab('Root.Main', HiddenField::create('ClinicalModuleID'));
                $fields->addFieldToTab('Root.Main', HiddenField::create('PrescribingIndicatorID'));
            }
        }

        public function onAfterWrite()
        {
            parent::onAfterWrite(); // TODO: Change the autogenerated stub

            $periodID = $this->owner->PeriodID;
            if ($periodID) {
                $memberID = $this->owner->ID;
                $historyLists = History::get()->filter(['PeriodID' => $periodID, 'MemberID' => $memberID]);

                if(!count($historyLists)) {
                    $history = new History();
                    $history->Name = $this->getPeriod()->Name;
                    $history->PeriodID = $periodID;
                    $history->StartDate = $this->getPeriod()->StartDate;
                    $history->EndDate   = $this->getPeriod()->EndDate;
                    if ($this->getClinicalModule()) {
                        $history->ClinicalModule   = $this->getClinicalModule()->Name;
                        $history->ClinicalModuleID = $this->getClinicalModule()->ID;
                    }
                    if ($this->getPrescribingIndicator()) {
                        $history->PrescribingIndicator   = $this->getPrescribingIndicator()->Name;
                        $history->PrescribingIndicatorID = $this->getPrescribingIndicator()->ID;
                    }
                    $history->MemberID = $memberID;
                    $history->write();
                }
            }
        }

        public function onBeforeWrite()
        {
            parent::onBeforeWrite(); // TODO: Change the autogenerated stub

        }

        public function getPeriod()
        {
            return ModulePeriod::get()->byID($this->owner->PeriodID);
        }

        public function getPho()
        {
            $pho = PhoList::get()->byID($this->owner->PHOID);
            return $pho->Name;
        }

        public function getMemberType()
        {
            return MemberType::get()->byID($this->owner->MemberTypeID);
        }

        public function getClinicalModule()
        {
            return Modules::get()->byID($this->owner->ClinicalModuleID);
        }

        public function getPrescribingIndicator()
        {
            return Modules::get()->byID($this->owner->PrescribingIndicatorID);
        }

        public function getModuleHistories()
        {
            return $this->owner->History()->filter('Archived', false)->sort('Sort');
        }
    }
}
